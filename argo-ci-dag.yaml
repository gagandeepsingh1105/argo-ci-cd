apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: ci-test
spec:
  entrypoint: pipeline
  #prepare a volume claim for the entire workflow
  volumeClaimTemplates:
    - metadata:
        name: repo-root
      spec:
        accessModes: ["ReadWriteOnce"]
        resources:
          requests:
            storage: 1Gi
  #start the sequence
  templates:
    - name: pipeline
      dag:
        tasks:
            - name: git-clone
              template: git-clone
            - name: check-repo
              template: check-repo              
              dependencies:
                - git-clone
            - name: build
              template: build              
              dependencies:
                - check-repo 
            - name: fetch-config
              template: fetch-config              
              dependencies:
                - build 
            - name: update-config
              template: update-config              
              dependencies:
                - fetch-config                 
        #todo add other steps later

    - name: check-repo
      container:
        image: alpine:latest
        command: [sh, -c]
        args:
          [
            "echo getting message from volume; ls /workdir/coderepo/mockapi.git > ls.txt; cat ls.txt",
          ]
        volumeMounts:
          - name: repo-root
            mountPath: /workdir ##
            
    - name: build
      container:
        image: gcr.io/kaniko-project/executor:latest #gcr.io/kaniko-project/executor:v1.9.0-debug
        args:
            - "--context=/workdir/coderepo/mockapi.git"
            - "--dockerfile=Dockerfile"
            - "--destination=northamerica-northeast1-docker.pkg.dev/phx-01h7jztawwz09ct30bgp1tfj9m/cloud-run-source-deploy/ci-cd-image"
            - "--image-name-tag-with-digest-file=/workdir/coderepo/digest.txt"            
        volumeMounts:
          - name: repo-root
            mountPath: /workdir ##  

    - name: update-config
      container:
        image: alpine/git:latest
        command: [sh, -c]
        args:
          [
          "sha_commit=`cat /workdir/coderepo/digest.txt|cut -d':' -f3`;cd /workdir/configrepo/mockapi_deployment.git; git checkout -b branch-$sha_commit;sed -i \"s/sha256.*/sha256:$sha_commit/\" mockapi_deployment.yaml; cat mockapi_deployment.yaml;git add mockapi_deployment.yaml;git config user.email $git_user_email; git config user.name $git_user;git commit -m 'Updating deployment.yaml'; git branch;git status;git remote set-url origin https://$git_user:$git_token@github.com/$git_user/mockapi_deployment.git;git push -u origin branch-$sha_commit", 
          ]
        env:
          - name: git_user 
            valueFrom:
              secretKeyRef:
                key: username
                name: git-access
          - name: git_user_email 
            valueFrom:
              secretKeyRef:
                key: email
                name: git-access
          - name: git_token 
            valueFrom:
              secretKeyRef:
                key: token
                name: git-access          
        volumeMounts:
          - name: repo-root
            mountPath: /workdir ##              
            
    - name: git-clone
      container:
        image: k8s.gcr.io/git-sync:v3.1.6
        args:
            - "--repo=https://github.com/gagandeepsingh1105/mockapi.git"
            - "--root=/workdir/coderepo"
            - "--max-sync-failures=3"
            - "--timeout=200"
            - "--branch=master"
            - "--one-time" 
        volumeMounts:
          - name: repo-root
            mountPath: /workdir ##
      securityContext:
        runAsUser: 0 

    - name: fetch-config
      container:
        image: k8s.gcr.io/git-sync:v3.1.6
        args:
            - "--repo=https://github.com/gagandeepsingh1105/mockapi_deployment.git"
            - "--root=/workdir/configrepo"
            - "--max-sync-failures=3"
            - "--timeout=200"
            - "--branch=main"
            - "--one-time"            
        volumeMounts:
          - name: repo-root
            mountPath: /workdir ##
      securityContext:
        runAsUser: 0         


